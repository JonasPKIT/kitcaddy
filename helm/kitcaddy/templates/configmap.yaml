apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "kitcaddy.fullname" . }}-config
  namespace: {{ .Values.namespace | default "default" }}
data:
  config.json: |
    {
      "logging": {
        "logs": {
          "default": {
            "level": {{ .Values.kitcaddy.logLevel | quote }}
          }
        }
      },
      "admin": {
        "disabled": {{ .Values.kitcaddy.admin.disabled }}
      },
      "apps": {
        "tls": {
          {{- if (.Values.kitcaddy.apps.tls.certificates) }}
          "certificates": {
            {{- with .Values.kitcaddy.apps.tls.certificates }}
            {{- if (.loadfiles) }}
            "load_files": [
              {{- range $index, $file := .loadfiles }}
              {{- if $index }},{{- end }}
              {
                "certificate": {{ $file.certificate | quote }},
                "key": {{ $file.key | quote }},
                "format": {{ $file.format | quote }},
                "tags": [
                  {{- range $index, $tag := $file.tags }}
                    {{- if $index }},{{- end }}
                    {{ $tag | quote }}
                  {{- end }}
                ]
              }
              {{- end }}
            ]
            {{- end }}
          }
          {{- end }}
          {{- end }}
        },
        "http": {
          "servers": {
            {{- range $index, $server := .Values.kitcaddy.servers }}
            {{- if $index }},{{- end}}
            {{ $server.name | quote}}: {
                "listen": [
                  ":{{.listenPort}}"
              ],
            {{- if ($server.strictSniHost) }}
            "strict_sni_host": {{ $server.strictSniHost.value }},
            {{- end }}

            {{- if ($server.tlsConnectionPolicies) }}
            "tls_connection_policies": [
              {
                {{- if ($server.tlsConnectionPolicies.clientAuthentication) }}
                {{- with $server.tlsConnectionPolicies.clientAuthentication }}
                  "client_authentication": {
                      {{- if (.require) }}
                      "require": {{.require}}
                      {{- end }}
                  }
                {{- end }}
                {{- end }}
              }
            ],
            {{- end }}

            {{- if ($server.automaticHttps) }}
            "automatic_https": {
                {{- if ($server.automaticHttps.disableRedirects) }}
                "disable_redirects": {{$server.automaticHttps.disableRedirects}}
                {{- end }}
            },
            {{- end }}

              "routes": [
                {{- range $index, $route := $server.routes }}
                  {{- if $index}},{{- end}}
                  {
                    "match": [
                      {
                        "path": [

                          {{- range $index, $path := $route.paths }}
                              {{- if $index}},{{- end}}
                          {{$path | quote }}
                          {{- end }}
                        ]
                      }
                    ],

                    "handle": [
                      {{- if ($route.prometheus)}}
                      {
                        "handler": "prometheus",
                        "metrics_path": {{ $route.prometheus.path | quote }}
                      },
                      {{- end }}
                      {{- if ($route.wsp) }}
                      {{- with $route.wsp }}
                      {
                        "handler": "oioidwsrestwsp",
                        "mongo_host": {{ .mongoHost | quote }},
                        "mongo_db": {{ .mongoDb | quote }},
                        "trust_cert_files": [
                                {{- range $index, $trust := .trusts }}
                                    {{- if $index}},{{- end}}
                                {{ $trust | quote }}
                                {{- end }}
                        ],
                        "audience_restriction": {{ .audienceRestriction | quote }},
                        {{- if (.sessiondataHeadername) }}
                        "sessiondata_headername": {{ .sessiondataHeadername | quote }},
                        {{- end }}
                        "hok": {{ .hok | quote }}
                      },
                      {{- end }}
                      {{- end }}
                      {{- if ($route.wsc) }}
                      {{- with $route.wsc }}
                      {
                        "handler": "oioidwsrestwsc",
                        "mongo_host": {{ .mongoHost | quote }},
                        "mongo_db": {{ .mongoDb | quote }},
                        "sts_url": {{ .stsUrl | quote }},
                        "client_cert_file": {{ .clientCertFile | quote }},
                        "client_key_file": {{ .clientKeyFile | quote }},
                        "trust_cert_files": [
                                    {{- range $index, $trust := .trustCertFiles }}
                                        {{- if $index}},{{- end}}
                                    {{ $trust | quote }}
                                    {{- end }}
                        ],
                        {{- if (.sessionDataUrl) }}
                        "session_data_url": {{ .sessionDataUrl | quote }},
                        {{- end }}
                        "service_endpoint": {{ .serviceEndpoint | quote }},
                        "service_audience": {{ .serviceAudience | quote }}

                      },
                      {{- end }}
                      {{- end }}
                      {{- if ($route.saml) }}
                      {{- with $route.saml }}
                      {
                        "handler": "samlprovider",
                        "session_header_name": {{ .sessionHeaderName | quote }},
                        "session_expiry_hours": {{ .sessionExpiryHours | quote }},
                        "mongo_host": {{ .mongoHost | quote }},
                        "mongo_db": {{ .mongoDb | quote }},
                        "audience_restriction": {{ .audienceRestriction | quote }},
                        "idp_metadata_url": {{ .idpMetadataUrl | quote }},
                        "entityId": {{ .entityId | quote }},
                        "sign_authn_req": {{ .signAuthnReq | quote }},
                        "sign_cert_file": {{ .signCertFile | quote }},
                        "sign_key_file": {{ .signKeyFile | quote }},

                        "external_url": {{ .externalUrl | quote }},
                        "metadata_path": {{ .metadataPath | quote }},
                        "logout_path": {{ .logoutPath | quote }},
                        "slo_path": {{ .sloPath | quote }},
                        "sso_path": {{ .ssoPath | quote }},
                        "logout_landing_page": {{ .logoutLandingPage | quote }},

                        "cookie_domain": {{ .cookieDomain | quote }},
                        "cookie_path": {{ .cookiePath | quote }}
                      },
                      {{- end }}
                      {{- end }}
                      {
                        "handler": "reverse_proxy",
                        "transport": {
                          "protocol": "http",
                          {{- if ($route.upstream.clientTls) }}
                          {{- with $route.upstream.clientTls }}
                          "tls": {
                              "insecure_skip_verify": {{ .insecureSkipVerify }},
                              "client_certificate_file": {{ .clientCertificateFile | quote }},
                              "client_certificate_key_file": {{ .clientCertificateKeyFile | quote }}
                          },
                          {{- end }}
                          {{- end }}
                          "read_buffer_size": 4096
                      },
                      "upstreams": [
                        {
                          "dial": "{{ $route.upstream.host }}:{{ $route.upstream.port }}"
                        }
                      ]
                      {{- if ($route.wsc) }}
                      {{- with $route.wsc }}
                      ,
                      "headers": {
                        "request": {
                          "set": {
                            "Host": "[{{ $route.upstream.host }}:{{ $route.upstream.port }}]" 
                          }
                        }
                      }
                      {{- end }}
                      {{- end }}
                    }
                  ]
                }
                {{- end }}
              ]
            }
        {{- end }}
          }
        }
      }
    }